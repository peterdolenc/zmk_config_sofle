/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT 
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

/ {
    combos {
        compatible = "zmk,combos";

        Lock {
            bindings = <&kp LG(LC(Q))>;
            key-positions = <0 11>;
        };
       bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <12 13 21>;
        };
        bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <12 13 23>;
        };
        bt_prev {
            bindings = <&bt BT_PRV>;
            key-positions = <12 13 22>;
        };
        sleep {
            bindings = <&kp LS(LA(S))>;
            key-positions = <49 36>;
        };

        win-print-screen {
            bindings = <&kp LS(LC(X))>;
            key-positions = <11 23>;
        };

        caps-word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        email {
            bindings = <&email>;
            key-positions = <2 3 4>;
        };

        mac-print-screen {
            bindings = <&kp LS(LG(NUMBER_4))>;
            key-positions = <0 12>;
        };

        esc2 {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 11>;
        };

        del1 {
            bindings = <&kp DELETE>;
            key-positions = <21 10>;
        };

    };

    behaviors {
        hold_tap_keys: hold_tap_keys {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
           flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
        };

        hold_tap_balanced: hold_tap_balanced {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
           flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
        };

        sticky: sticky {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_RSFT)>;
        };

        scroll_vertical: scroll_vertical {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROLL_VERTICAL";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
        };

        scrol_horizontal: scrol_horizontal {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROL_HORIZONTAL";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
        };

        hold_tap_layer_immediate: hold_tap_layer_immediate {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER_IMMEDIATE";
            bindings = <&mo>, <&kp>;
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            hold-while-undecided;
        };

       scroll: scroll {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "SCROLL";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
            tap-ms = <80>;     
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp M &kp A &kp I &kp L &kp RA(V) &kp P &kp E &kp T &kp E &kp R &kp D &kp O &kp L &kp E &kp N &kp C &kp DOT &kp S &kp I>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            bindings = <
&kp NUMBER_1        &kp N2  &kp N3    &kp N4    &kp N5                                 &kp N6                                         &kp N7                       &kp N8          &kp N9          &kp N0        &kp MINUS               &kp EQUAL
&kp TAB             &kp Q   &kp W     &kp E     &kp R                                  &kp T                                          &kp Y                        &kp U           &kp I           &kp O         &kp P                   &kp LEFT_BRACKET
&sticky LEFT_SHIFT  &kp A   &kp S     &kp D     &kp F                                  &kp G                                          &kp H                        &kp J           &kp K           &kp L         &kp SEMI                &hold_tap_keys RIGHT_SHIFT NON_US_HASH
&kp LCTRL           &kp Z   &kp X     &kp C     &kp V                                  &kp B               &kp C_MUTE  &kp CAPSLOCK   &kp N                        &kp M           &kp COMMA       &kp DOT       &kp SLASH               &kp RIGHT
                            &kp LGUI  &kp LALT   &mo 1     &hold_tap_layer_immediate 3 KP_ENTER     &hold_tap_balanced LEFT_SHIFT SPACE   &backspace_del     &mo 2         &mo 1        &kp LEFT_ARROW      &kp LG(LS(M))   
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&scroll MOVE_Y(20)  MOVE_Y(-20)>;
        };

        alt_gr_fn_layer {
            display-name = "Alt-Gr/FN";

            bindings = <
&kp F1  &kp F2            &kp F3            &kp F4          &kp F5      &kp F6                           &kp F7      &kp F8        &kp F9         &kp F10        &kp F11            &kp F12
&trans  &kp RA(Q)         &kp RA(W)         &kp RA(E)       &kp LS(N5)  &kp LS(N6)                       &kp RA(N7)  &kp RA(COMMA) &kp RA(PERIOD) &kp LS(N1)     &kp LS(MINUS)      &kp LS(EQUAL)
&trans  &kp LS(N2)        &kp LS(N3)        &kp LS(N4)      &kp RA(F)   &kp RA(G)                        &kp LS(N7)  &kp LS(N8)    &kp LS(N9)     &kp LS(N0)     &kp MINUS          &kp EQUAL
&trans  &kp RA(NUMBER_1)  &kp RA(NUMBER_3)  &kp LEFT_BRACE  &kp RA(V)   &kp RA(B)  &trans    &trans      &kp RA(N)   &kp RA(N5)    &kp INSERT     &kp LS(EQUAL)  &kp EQUAL          &kp END 
                          &trans            &trans          &trans      &trans     &trans    &kp DELETE  &trans      &trans        &kp HOME       &kp RA(SEMICOLON)
            >;

            sensor-bindings =
                <&scroll MOVE_X(20) MOVE_X(-20)>,
                <&scroll MOVE_Y(20)  MOVE_Y(-20)>;
        };

        navi {
            display-name = "navi";

            bindings = <
&trans  &trans            &trans            &trans          &trans      &trans                       &trans      &trans        &trans      &trans         &trans             &trans
&trans  &trans            &trans            &trans          &trans      &trans                       &trans      &kp HOME        &kp UP      &kp END         &kp PG_UP             &trans
&trans  &trans            &trans            &trans          &trans      &trans                       &trans      &kp LEFT      &kp DOWN    &kp RIGHT         &kp PG_DN             &trans
&trans  &trans            &trans            &trans          &trans      &trans                       &trans      &trans         &kp INSERT      &trans         &trans            &trans
                          &trans            &trans          &trans      &trans     &trans    &trans  &trans      &trans      &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT RIGHT>,
                <&inc_dec_kp PG_UP  PG_DN>;
        };

        mouse {
            bindings = <
&kp F1   &kp F2      &kp F3          &kp F4             &kp F5           &kp F6                    &kp F7           &kp F8             &kp F9              &kp F10            &kp F11          &kp F12
&trans   &trans      &trans          &mmv MOVE_UP       &trans           &trans                    &msc MOVE_Y(20)  &mkp LCLK          &mmv MOVE_Y(-1100)  &mkp RCLK          &kp INSERT       &trans
&trans   &mkp RCLK   &mmv MOVE_LEFT  &mmv MOVE_DOWN     &mmv MOVE_RIGHT  &trans                    &msc MOVE_Y(-20) &mmv MOVE_X(-1100) &mmv MOVE_Y(1100)   &mmv MOVE_X(1100)  &mkp RCLK        &trans
&trans   &mkp MCLK   &mkp RCLK       &mmv MOVE_Y(1100)  &mkp LCLK        &trans  &trans  &trans    &trans           &msc MOVE_X(-20)   &mmv MOVE_DOWN      &msc MOVE_X(20)    &msc MOVE_Y(20)  &msc MOVE_X(20)
                     &trans          &trans             &trans           &trans  &trans  &mkp RCLK &mkp LCLK        &mkp MCLK          &msc MOVE_X(-20)    &msc MOVE_Y(-20)
            >;

            sensor-bindings =
                <&scroll MOVE_X(20) MOVE_X(-20)>,
                <&scroll MOVE_Y(20)  MOVE_Y(-20)>;
        };
    };
};
